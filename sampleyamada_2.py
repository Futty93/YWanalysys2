# -*- coding: utf-8 -*-
"""SampleYamada-2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CrMoO4Iik3Gyu-SKvjXFAN944mKwSKrf

左の📂を押して、EXCELファイルをドラック＆ドロップで読み込んでください
"""

##ファイル名を入力！！！
FileName1 = "SampleExcel1.xlsx" #n=1
FileName2 = "SampleExcel2.xlsx" #n=2
FileName3 = "SampleExcel3.xlsx" #n=3

from IPython.utils import path
import openpyxl ##Excelを読み書きするため
import tqdm ##プログレスバーを表示するため
from openpyxl.chart import( ##Excelにグラフを描画するため
    ScatterChart,
    BarChart,
    Reference,
    Series,
)
from openpyxl.chart import Reference
from openpyxl.chart.axis import DateAxis
import numpy as np

"""↓↓↓↓↓↓↓↓↓↓↓↓データの読み込みエリア↓↓↓↓↓↓↓↓↓↓↓↓"""
inputData = []
inputData.append(openpyxl.load_workbook(FileName1)) ##ファイルを開く Open File.
inputData.append(openpyxl.load_workbook(FileName2)) ##ファイルを開く Open File.
inputData.append(openpyxl.load_workbook(FileName3)) ##ファイルを開く Open File.


samples = [] #それぞれの値を読み込むための空の配列を準備
"""samplesは3次元配列で、1つ目の要素がn=1、2つ目がn=2と対応する
    それぞれの要素の1つ目がサンプル1、2つ目がサンプル2に対応している"""
for i in range(3):
  samples.append([])
  for _ in range(2):
      samples[i].append([])
  for j in range(11): #各サンプルの0番目の要素をblankとして利用
    average1, average2 = 0, 0
    for k in range(3):
      #① 各ファイル、各サンプル、各濃度でtriplicateの平均を算出する
      average1 += inputData[i].active.cell(row=(11+k), column=(2+j)).value
      average2 += inputData[i].active.cell(row=(14+k), column=(2+j)).value
    samples[i][0].append(average1/3)
    samples[i][1].append(average2/3)

"""↓↓↓↓↓↓↓↓↓↓↓↓データの操作エリア↓↓↓↓↓↓↓↓↓↓↓↓"""
for i in range(3): #② 各ファイルの各サンプル、各濃度で「各濃度の平均値-blankの平均値」を行う
  for j in range(1, 11):
    samples[i][0][j] = samples[i][0][j] - samples[i][0][0]
    samples[i][1][j] = samples[i][1][j] - samples[i][1][0]
##samplesの各要素には０番目にblankの値、その後にはそれぞれblankを引いた値が入っている

##平均、標準偏差、標準誤差を保持する配列を用意
average, standardDeviation, standardError = [], [], []

#③　②の値のファイル間での平均値及び標準偏差を算出する
for i in range(2):
  average.append([])
  standardDeviation.append([])
  standardError.append([])
  for j in range(1, 11):
    List = []
    for k in range(3):
      List.append(samples[k][i][j])
    average[i].append((samples[0][i][j] + samples[1][i][j] + samples[2][i][j]) / 3)
    num = np.std(List)
    standardDeviation[i].append(num)
    standardError[i].append(num/np.sqrt(3))

print(average)
print(standardDeviation)
print(standardError)

# p = 0

# for i in range(14, 1154+19, 19): #14から1154まで19刻みで繰り返す
#   blank.append([])
#   sample1.append([])
#   sample2.append([])
#   sample3.append([])
#   for j in range(3): #3つの連続したデータをそれぞれの配列に追加
#     blank[p].append(inputData.active.cell(row=(i+j), column=9).value)
#     sample1[p].append(inputData.active.cell(row=(i+j), column=10).value)
#     sample2[p].append(inputData.active.cell(row=(i+j), column=11).value)
#     sample3[p].append(inputData.active.cell(row=(i+j), column=12).value)
  
#   p += 1

# # print(sample2)

# """↓↓↓↓↓↓↓↓↓↓↓↓データの操作エリア↓↓↓↓↓↓↓↓↓↓↓↓"""
# inputData.create_sheet("EditedData") #EditedDataという名前のシートを作成

# for i in range(len(blank)): #①各行について 「サンプルの値-blankの値」を行う
#   for j in range(3):
#     sample1[i][j] = sample1[i][j] - blank[i][j]
#     sample2[i][j] = sample2[i][j] - blank[i][j]
#     sample3[i][j] = sample3[i][j] - blank[i][j]
# # print(sample3)

# for i in range(len(sample1)): #② ①の値についてtriplicateで平均を算出する
#   inputData["EditedData"].cell(row=1, column=2).value = "control"
#   inputData["EditedData"].cell(row=1, column=3).value = "ACP1b"
#   inputData["EditedData"].cell(row=1, column=4).value = "242a"
#   inputData["EditedData"].cell(row=i+2, column=1).value = i
#   sample1[i] = (sample1[i][0] + sample1[i][1] + sample1[i][2])/3
#   inputData["EditedData"].cell(row=i+2, column=2).value = sample1[i]
#   sample2[i] = (sample2[i][0] + sample2[i][1] + sample2[i][2])/3
#   inputData["EditedData"].cell(row=i+2, column=3).value = sample2[i]
#   sample3[i] = (sample3[i][0] + sample3[i][1] + sample3[i][2])/3
#   inputData["EditedData"].cell(row=i+2, column=4).value = sample3[i]
# # print(sample1)


# """↓↓↓↓↓↓↓↓↓↓↓↓グラフの描画エリア↓↓↓↓↓↓↓↓↓↓↓↓"""
# graph = openpyxl.chart.LineChart() #グラフの種類
# # graph.title  = "Sample" #グラフのタイトル  必要なら入力してください
# graph.style  = 12 #グラフのフォントサイズ
# graph.height = 10 #高さ
# graph.width  = 15 #幅

# graph.y_axis.title = inputData.sheetnames[0] #y軸ラベル
# yValue = Reference(inputData["EditedData"],min_col = 2, min_row = 1, max_col = 4, max_row = 62)
# xValue = Reference(inputData["EditedData"],min_col = 1, min_row = 2, max_row = 62)

# graph.add_data(yValue, titles_from_data=True) ##y軸のデータ
# graph.set_categories(xValue) ##x軸のデータ
# graph.y_axis.numFmt = "0" ##縦軸のラベルの書式指定 小数第2位まで表示

# inputData["EditedData"].add_chart(graph, "E2") ##E2にグラフを描画 Draw a graph at position E2

# #X-Y軸(1)グラフスタイル
# style = graph.series[0]
# style.graphicalProperties.line.solidFill = "AAAAAA"   #グラフカラー
# style.graphicalProperties.line.width = 40000          #グラフ幅
# # style.smooth = False                                   #グラフの線を滑らかにする

# #X-Y軸(2)グラフスタイル
# style2 = graph.series[1]
# style2.graphicalProperties.line.solidFill = "5B9BD5"  #グラフカラー
# style2.graphicalProperties.line.width = 40000         #グラフ幅
# # style2.smooth = True                                  #グラフの線を滑らかにする

# style3 = graph.series[2]
# style3.graphicalProperties.line.solidFill = "ED7D31"  #グラフカラー
# style3.graphicalProperties.line.width = 40000         #グラフ幅
# # style3.smooth = True                                  #グラフの線を滑らかにする



# inputData.save("Edited_" + FileName) ##エクセルファイルを保存 Save Excel file
# inputData.close() ##エクセルファイルを閉じる Close Excel file